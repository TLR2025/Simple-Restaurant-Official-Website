/* eslint-disable @typescript-eslint/no-explicit-any */
// WARNING: This code was generated by AI.

import { getPayload } from "payload";
import config from "@payload-config";
import { notFound } from "next/navigation";
import Image from "next/image";
import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import GridBg from "@/components/grid-bg";
import { Metadata } from "@/types/metadata";

interface PageProps {
  params: Promise<{ slug: string }>; 
}

export async function generateMetadata({ params }: PageProps) {
    const slug = (await params).slug;
    const payload = await getPayload({config});
    const dish = await payload.find({
        collection: "dishes",
        where: {
            slug: {
                equals: slug
            }
        }
    });
    const d = dish.docs[0];
    if(!d)  return null;
    return {
        title: d.name + " - " + process.env.NEXT_PUBLIC_SITE_NAME,
        description: d.description,
        keywords: [d.name, process.env.NEXT_PUBLIC_SITE_NAME],
        openGragh: {
            title: d.name,
            description: d.description,
            url: process.env.NEXT_PUBLIC_SITE_URL + "/dish" + (await params).slug,
            siteName: process.env.NEXT_PUBLIC_SITE_NAME,
            images: [
                d.image,
            ]
        }
    } as Metadata;
}

export default async function DishDetails({ params }: PageProps) {
    const slug = (await params).slug;
    const payload = await getPayload({config});
    const dish = await payload.find({
        collection: "dishes",
        where: {
            slug: {
                equals: slug
            }
        }
    });
    if(!dish)
        notFound();
    const d = dish.docs[0];
    // console.log(d);
    if(!d)
        notFound();
    return (
        <div
            className={cn(
                "w-screen min-h-screen", // 尺寸与容器
                "pt-24 px-4 pb-8", // 上边距 20 + 内边距
                "flex items-center justify-center", // 居中对齐
                // "lg:scale-110",
                "bg-amber-100",
        )}>
            <div
                className={cn(
                    "rounded-lg shadow-lg overflow-hidden", // 外观
                    "flex flex-col md:flex-row", // 响应式布局
                    "w-full max-w-5xl h-auto md:h-96", // 最大宽度
                    "relative z-0"
                )}
            >
                {/* 网格背景区域 */}
                <GridBg />

                {/* 图片区域 */}
                <div className="md:flex-shrink-0 select-none">
                {d.image && typeof d.image !== "string" && d.image.url && (
                    <Image
                        className={cn(
                            "object-cover", // 填充方式
                            "w-full h-64", // 移动端高度
                            "md:w-96 md:h-full" // 桌面端宽度固定
                    )}
                        src={d.image.url}
                        alt={d.image.alt}
                        width={d.image.width}
                        height={d.image.height}
                        placeholder="blur"
                        blurDataURL={d.image.blurDataURL}
                    />
                )}
                </div>

                {/* 右侧详情 */}
                <div
                    className={cn(
                        "p-8 flex flex-col justify-between", // 内边距与布局
                        !d.isAvailable && "opacity-60" // 不可用时半透明
                    )}
                >
                    <div>
                        <h1
                            className={cn(
                                "text-3xl font-bold leading-tight", // 字体
                                "text-gray-900"
                        )}
                        >
                            {d.name}
                        </h1>

                        <p
                            className={cn(
                                "mt-2 text-lg", // 字体尺寸
                                "text-gray-600"
                        )}
                        >
                            {d.description}
                        </p>

                        {/* Categories */}
                        {d.category && d.category.length > 0 && (
                            <div className="mt-4 flex flex-wrap gap-2">
                                {d.category.map((cat:any) => (
                                    <span
                                        key={cat.id}
                                        className="bg-indigo-100 text-indigo-800 text-sm font-medium px-2 py-1 rounded-full"
                                    >
                                        {cat.name}
                                    </span>
                                ))}
                            </div>
                        )}

                        <div className="mt-4">
                            <span
                                className={cn(
                                "text-2xl font-semibold", // 字体
                                d.isAvailable ? "text-indigo-600" : "text-gray-400" // 可用性区分
                                )}
                            >
                                ${d.price?.toFixed(2)}
                            </span>
                        </div>

                        {!d.isAvailable && (
                            <p
                                className={cn(
                                "mt-2 text-sm", // 字体尺寸
                                "text-red-500 font-medium" // 不可用提示
                                )}
                            >
                                This dish is currently unavailable.
                            </p>
                        )}
                    </div>

                    {/* 按钮区域 */}
                    <div className="mt-6">
                        <Button
                            className={cn(
                                "rounded-lg shadow-md", // 外观
                                "transition duration-300 ease-in-out", // 动效
                                d.isAvailable
                                ? "bg-indigo-600 hover:bg-indigo-700 text-white font-bold" // 可用状态
                                : "bg-gray-300 text-gray-500 cursor-not-allowed" // 不可用状态
                            )}
                            disabled={!d.isAvailable}
                            type="button"
                        >
                            {d.isAvailable ? "Order on UberEats" : "Unavailable"}
                        </Button>
                    </div>
                </div>
            </div>
        </div>
    );
}